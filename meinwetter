#! /usr/bin/bash
#
# meinwettter 1.2.3, 2023-03-18, 2023-03-20, 2023-03-21, 2023-03-23, 2023-03-25
#
# Versuch einer einfachen Abfrage des Wetters fuer deutsche Staedte.
#
# Bernd Storck, https://www.facebook.com/BStLinux/
#

# Berlin 62422
# Hamburg 62782


## Constants: ############################
PROG_NAME="Mein Wetter"
ORIGINAL_SCRIPT_NAME="meinwetter"
CURRENT_SCRIPT_NAME="${0##*/}"
# TITLE="$CURRENT_SCRIPT_NAME"
PROG_VERSION="1.2.3 / 2023-03-25 14:58:18"


### SELF DOCUMENTATION: VERSION INFOS #########################
case "$1" in
  --version|-V)
    echo -n "$CURRENT_SCRIPT_NAME ("
    if [ "$CURRENT_SCRIPT_NAME" != "$ORIGINAL_SCRIPT_NAME" ]; then
      echo -n "$PROG_NAME "
    fi
    echo "$PROG_VERSION)"
    exit 0
    ;;
  -v|-\#)
    echo "$PROG_VERSION"
    exit 0
    ;;
esac


ort="$*"
# ort="$(sed -E 's:(\()(.+)(\)):\\\1\2\\\3:g' <<< "$*")"  ## "Frankfurt (Oder)"
# echo "$ort"

if [ -r places-de ] && [ -r regions-de ]; then  ## Localisation of data files:
  dataDir="$(pwd)/"
elif [ -r "$HOME/.local/share/meinwetter/places-de" ] && [ -r "$HOME/.local/share/meinwetter/./regions-de" ]; then
  dataDir="$HOME/.local/share/meinwetter/"
elif [ -r "/usr/local/share/places-de" ] && [ -r "/usr/local/share/regions-de" ]; then
  dataDir="/usr/local/share/meinwetter/"
fi

placesFile="${dataDir}places-de"
regionsFile="${dataDir}regions-de"


function calc_average_centigrades {
# Calculates the avagage temperature in degrees Celsius.

  last=$(( "${#temperatures[@]}" - 1 ))  ## Index value of last array element.
  for (( i=0; i<=last; i++ ))
  do
    summand="${temperatures[$i]}"
    summe="$(( summe + summand ))"
  done

  divisor="$(( last + 1 ))"

  calculator=""
  for i in dc bc qalc;
  do
    if command -v "$i" > /dev/null 2>&1; then
      calculator="$i"
      break
    fi
  done
  case "$calculator" in
    dc)
      average_degrees="$( dc -e "2 k $summe $divisor / p" )"
      ;;
    bc)
      average_degrees="$( bc <<< "scale=2; $summe / $divisor" )"
      ;;
    qalc)
      average_degrees="$( qalc --terse "$summe" / "$divisor" )"
      ;;
    *)
      average_degrees="$(( summe / divisor ))"
  esac
}


function fetch_times_with_degrees {
  times_and_following_line="$( grep -m1 -EA 999 '={4,}' <<< "$1" |\
                               grep -m1 -EB 999 '[*]{5}'         |\
                               sed -En '/^[0-9]{2}:[0-9]{2}/{
                                 N
                                 {s/\n/,/}
                                 p
                               }'
                             )"  ## Concatenates 2 lines with N.

  i=0
  for data in $times_and_following_line
  do
    if grep -sq '°$' <<< "$data"; then  ## Get pairs of time and degree.
      time="$(cut -d',' -f1 <<< "$data")"
      degree="$(cut -d',' -f2 <<< "$data" | grep -Eo '^[0-9]+')"
      times_with_degrees[$i]="$time-$degree"
      (( i = i + 1 ))
    elif grep -s '↑$' <<< "$data" > /dev/null; then   ## Get sunrise.
      sunrise="$(cut -d',' -f1 <<< "$data")"
    elif grep -s '↓$' <<< "$data" > /dev/null; then   ## Get sunset.
      sunset="$(cut -d',' -f1 <<< "$data")"
    fi
  done
}


function fetch_degrees {
  if [ -z "$times_and_following_line" ]; then
    fetch_times_with_degrees "$1"
  fi

  last=$(( "${#times_with_degrees[@]}" - 1 ))  ## Index value of last array element.
  for (( i=0; i<=last; i++ ))
  do
    temperatures[$i]="$(cut -d'-' -f2 <<< "${times_with_degrees[$i]}")"
  done

# echo -ne "Summanden:\n$summanden" | cat -A
}

matching_input=0
cancel_info="\n(\"x\", \"exit\" oder \"Ende\" für Abbruch.)"
while [ -z "$numbers" ];
do
  if [ "$matching_input" -ne 1 ]; then
    prompt="Bitte geben Sie den Namen eines Ortes ein!"
  else
    prompt="Bitte geben Sie einen anderen Ortsnamen ein!"
  fi
  if [ -z "$1" ] || [ "$matching_input" -ne 0 ]; then
    echo -e "${prompt}$cancel_info"
    read -rp "Eingabe: " ort
    # echo "$ort"
  fi

  if [ "$ort" = "x" ] || [ "$ort" = "exit" ] || grep -i 'ende' <<< "$ort" || [ "$ort" = "q" ] || [ "$ort" = "quit" ]; then
    exit 0
  fi

# numbers="$(grep -m1 "^$ort," "$placesFile" | cut -d, -f2)"  ## Versuch zu "Frankfurt (Oder)"
  numbers="$(grep -E -m1 "^$ort,[[:digit:]]+$" "$placesFile" | cut -d, -f2)"
  if [ -z "$numbers" ]; then
    numbers="$(grep -E -m1 "^$ort,[[:digit:]]+$" "$regionsFile" | cut -d, -f2)"
  fi
  if [ -z "$numbers" ]; then
    echo -ne "\n\"$ort\" kann nicht zugeordnet werden.\n"
    matching_input=1
  else
    matching_input=0
  fi
done

locationID="$numbers"

weather_data="$(curl -s "https://www.wetter.de/wetter/r/$locationID" | html2text -utf8 -width 111)"

echo "====== Das Wetter in $ort ======"
echo "$weather_data"                   |\
  grep -m1 -EB 999 '={4,}'             |\
  grep -F -A200 "Wetter $ort"          |\
  grep --color=never -E '[A-Z]+.{20,}' |\
  grep -Ev "^\[One of:|$ort"

fetch_degrees "$weather_data"
calc_average_centigrades

echo -n "Aktuelle Temperatur: $(cut -d',' -f2 <<< "${temperatures[0]}") °C / "
echo "Durchschnittliche Temperatur: $average_degrees °C"

if [ "$sunrise" != "" ]; then
  sun_info="Sonnenaufgang: $sunrise Uhr"
  [ "$sunset" != "" ] && sun_info="${sun_info} / "
fi
if [ "$sunset" != "" ]; then
  sun_info="${sun_info}Sonnenuntergang: $sunset Uhr"
fi
echo "$sun_info"

exit 0
